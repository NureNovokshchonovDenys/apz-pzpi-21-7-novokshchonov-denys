    1. СЕРВЕРНАЯ ЧАСТИНА ПРОДУКТУ
        1.1. База даних

У ході роботи було розроблено базу даних з використанням реляційної СУБД MongoDB.
MongoDB є широко використовуваною системою керування базами даних в документному форматі, зокрема має переваги як легке масштабування та простота взаємодії.
 Функції цієї системи дозволяють зручно . 
    • Python: MongoDB має PyMongo драйвер, що дозволяє з'єднуватися з базою даних MongoDB, виконувати запити та обробляти результати в Python.
Для реалізації було створено наступні таблиці:
        ◦ users: колекція з даними про клієнтів;
        ◦ sensors: колекція з даними датчиків;
        ◦ rooms: колекція з даними про приміщення;


        1.2. Backend

Для написання серверної частини коду в проекті, що стосується контролю якості повітря, використовувалися такі технології та бібліотеки:
    • Python: мова програмування, що часто використовується для розробки веб-додатків. Python може взаємодіяти з базою даних MongoDB, виконувати запити та обробляти результати.
    • MongoDB: це система керування базами даних. MongoDB забезпечує високу продуктивність, надійність і легкість у використанні. Функції цієї системи дозволяють легко масштабуватись.
    • Flask: це веб-сервер з відкритим кодом, який забезпечує надійність та гнучкість в розгортанні веб-додатків.

Для зв'язку з базою даних і визначення моделей у Python використовується об'єктно-орієнтований підхід. Були розроблені моделі, які представляють json-форматовані об’єкти та забезпечують зручний інтерфейс для взаємодії з ними.Щодо шифрування паролів та створення токенів авторизації, завдяки Python я використав generate_password_hash з werkzeug.security.

Хешування паролів забезпечує безпеку, оскільки навіть у разі несанкціонованого доступу до бази даних, зловмисники не зможуть дізнатися справжні паролі користувачів. Замість цього вони побачать тільки хешовані значення, які неможливо легко зворотно перетворити у вихідні паролі.

        1.3. Структура проекту


Проект було структуровано на три шари:
    1. Інтерфейс	користувача	–	налаштування	та	запити, за допомогою яких
користувач взаємодіє з контролерами та маршрутами.
    2. Логіка бізнес-процесів – обробка та управління даними.
    3. Рівень доступу до даних – робота з базою даних, міграції та забезпечення коректної взаємодії бази даних із сервером.


        1.4. Cпецифікація

При написанні запитів було обрано архітектурний стиль REST. Основні принципи REST, які використовуються в проекті, включають
REST (Representational State Transfer) використовується для створення ефективних та масштабованих API. REST забезпечує надійний обмін даними між клієнтом і сервером, що є критично важливим для роботи системи.
Всі ресурси системи доступні через стандартизовані методи HTTP (GET, POST, PUT, DELETE). Це забезпечує прозорість та передбачуваність взаємодії між клієнтом і сервером. Наприклад, для отримання інформації про клієнта використовується метод GET, для створення нового клієнта - POST, для оновлення даних клієнта - PUT, а для видалення клієнта — DELETE.